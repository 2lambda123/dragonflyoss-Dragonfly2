// Code generated by MockGen. DO NOT EDIT.
// Source: source_client.go

// Package source is a generated GoMock package.
package source

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "d7y.io/dragonfly/v2/cdnsystem/types"
)

// MockResourceClient is a mock of ResourceClient interface
type MockResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceClientMockRecorder
}

// MockResourceClientMockRecorder is the mock recorder for MockResourceClient
type MockResourceClientMockRecorder struct {
	mock *MockResourceClient
}

// NewMockResourceClient creates a new mock instance
func NewMockResourceClient(ctrl *gomock.Controller) *MockResourceClient {
	mock := &MockResourceClient{ctrl: ctrl}
	mock.recorder = &MockResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceClient) EXPECT() *MockResourceClientMockRecorder {
	return m.recorder
}

// GetContentLength mocks base method
func (m *MockResourceClient) GetContentLength(url string, headers map[string]string) (int64, error) {
	ret := m.ctrl.Call(m, "GetContentLength", url, headers)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentLength indicates an expected call of GetContentLength
func (mr *MockResourceClientMockRecorder) GetContentLength(url, headers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentLength", reflect.TypeOf((*MockResourceClient)(nil).GetContentLength), url, headers)
}

// IsSupportRange mocks base method
func (m *MockResourceClient) IsSupportRange(url string, headers map[string]string) (bool, error) {
	ret := m.ctrl.Call(m, "IsSupportRange", url, headers)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSupportRange indicates an expected call of IsSupportRange
func (mr *MockResourceClientMockRecorder) IsSupportRange(url, headers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupportRange", reflect.TypeOf((*MockResourceClient)(nil).IsSupportRange), url, headers)
}

// IsExpired mocks base method
func (m *MockResourceClient) IsExpired(url string, headers, expireInfo map[string]string) (bool, error) {
	ret := m.ctrl.Call(m, "IsExpired", url, headers, expireInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired
func (mr *MockResourceClientMockRecorder) IsExpired(url, headers, expireInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockResourceClient)(nil).IsExpired), url, headers, expireInfo)
}

// Download mocks base method
func (m *MockResourceClient) Download(url string, headers map[string]string) (*types.DownloadResponse, error) {
	ret := m.ctrl.Call(m, "Download", url, headers)
	ret0, _ := ret[0].(*types.DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockResourceClientMockRecorder) Download(url, headers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockResourceClient)(nil).Download), url, headers)
}
