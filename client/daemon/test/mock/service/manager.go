// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../service/manager.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Keep mocks base method
func (m *MockManager) Keep() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Keep")
}

// Keep indicates an expected call of Keep
func (mr *MockManagerMockRecorder) Keep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keep", reflect.TypeOf((*MockManager)(nil).Keep))
}

// Alive mocks base method
func (m *MockManager) Alive(alive time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alive", alive)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Alive indicates an expected call of Alive
func (mr *MockManagerMockRecorder) Alive(alive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alive", reflect.TypeOf((*MockManager)(nil).Alive), alive)
}

// ServeDownload mocks base method
func (m *MockManager) ServeDownload(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeDownload", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeDownload indicates an expected call of ServeDownload
func (mr *MockManagerMockRecorder) ServeDownload(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeDownload", reflect.TypeOf((*MockManager)(nil).ServeDownload), listener)
}

// ServePeer mocks base method
func (m *MockManager) ServePeer(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServePeer", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServePeer indicates an expected call of ServePeer
func (mr *MockManagerMockRecorder) ServePeer(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServePeer", reflect.TypeOf((*MockManager)(nil).ServePeer), listener)
}

// ServeProxy mocks base method
func (m *MockManager) ServeProxy(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeProxy", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeProxy indicates an expected call of ServeProxy
func (mr *MockManagerMockRecorder) ServeProxy(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeProxy", reflect.TypeOf((*MockManager)(nil).ServeProxy), listener)
}

// Stop mocks base method
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}
