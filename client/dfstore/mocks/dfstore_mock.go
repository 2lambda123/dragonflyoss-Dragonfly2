// Code generated by MockGen. DO NOT EDIT.
// Source: dfstore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	dfstore "d7y.io/dragonfly/v2/client/dfstore"
	gomock "github.com/golang/mock/gomock"
)

// MockDfstore is a mock of Dfstore interface.
type MockDfstore struct {
	ctrl     *gomock.Controller
	recorder *MockDfstoreMockRecorder
}

// MockDfstoreMockRecorder is the mock recorder for MockDfstore.
type MockDfstoreMockRecorder struct {
	mock *MockDfstore
}

// NewMockDfstore creates a new mock instance.
func NewMockDfstore(ctrl *gomock.Controller) *MockDfstore {
	mock := &MockDfstore{ctrl: ctrl}
	mock.recorder = &MockDfstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfstore) EXPECT() *MockDfstoreMockRecorder {
	return m.recorder
}

// CreateObject mocks base method.
func (m *MockDfstore) CreateObject(ctx context.Context, input *dfstore.CreateOjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockDfstoreMockRecorder) CreateObject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockDfstore)(nil).CreateObject), ctx, input)
}

// CreateObjectRequestWithContext mocks base method.
func (m *MockDfstore) CreateObjectRequestWithContext(ctx context.Context, input *dfstore.CreateOjectInput) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectRequestWithContext", ctx, input)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectRequestWithContext indicates an expected call of CreateObjectRequestWithContext.
func (mr *MockDfstoreMockRecorder) CreateObjectRequestWithContext(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectRequestWithContext", reflect.TypeOf((*MockDfstore)(nil).CreateObjectRequestWithContext), ctx, input)
}

// DeleteObject mocks base method.
func (m *MockDfstore) DeleteObject(ctx context.Context, input *dfstore.DeleteObjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockDfstoreMockRecorder) DeleteObject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockDfstore)(nil).DeleteObject), ctx, input)
}

// DeleteObjectRequestWithContext mocks base method.
func (m *MockDfstore) DeleteObjectRequestWithContext(ctx context.Context, input *dfstore.DeleteObjectInput) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectRequestWithContext", ctx, input)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectRequestWithContext indicates an expected call of DeleteObjectRequestWithContext.
func (mr *MockDfstoreMockRecorder) DeleteObjectRequestWithContext(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectRequestWithContext", reflect.TypeOf((*MockDfstore)(nil).DeleteObjectRequestWithContext), ctx, input)
}

// GetObject mocks base method.
func (m *MockDfstore) GetObject(ctx context.Context, input *dfstore.GetObjectInput) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, input)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockDfstoreMockRecorder) GetObject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockDfstore)(nil).GetObject), ctx, input)
}

// GetObjectRequestWithContext mocks base method.
func (m *MockDfstore) GetObjectRequestWithContext(ctx context.Context, input *dfstore.GetObjectInput) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectRequestWithContext", ctx, input)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectRequestWithContext indicates an expected call of GetObjectRequestWithContext.
func (mr *MockDfstoreMockRecorder) GetObjectRequestWithContext(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectRequestWithContext", reflect.TypeOf((*MockDfstore)(nil).GetObjectRequestWithContext), ctx, input)
}

// IsObjectExist mocks base method.
func (m *MockDfstore) IsObjectExist(ctx context.Context, input *dfstore.IsObjectExistInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectExist", ctx, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectExist indicates an expected call of IsObjectExist.
func (mr *MockDfstoreMockRecorder) IsObjectExist(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExist", reflect.TypeOf((*MockDfstore)(nil).IsObjectExist), ctx, input)
}

// IsObjectExistRequestWithContext mocks base method.
func (m *MockDfstore) IsObjectExistRequestWithContext(ctx context.Context, input *dfstore.IsObjectExistInput) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectExistRequestWithContext", ctx, input)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectExistRequestWithContext indicates an expected call of IsObjectExistRequestWithContext.
func (mr *MockDfstoreMockRecorder) IsObjectExistRequestWithContext(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExistRequestWithContext", reflect.TypeOf((*MockDfstore)(nil).IsObjectExistRequestWithContext), ctx, input)
}
