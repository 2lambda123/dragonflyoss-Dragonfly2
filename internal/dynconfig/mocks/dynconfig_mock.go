// Code generated by MockGen. DO NOT EDIT.
// Source: dynconfig.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDynconfig is a mock of Dynconfig interface.
type MockDynconfig struct {
	ctrl     *gomock.Controller
	recorder *MockDynconfigMockRecorder
}

// MockDynconfigMockRecorder is the mock recorder for MockDynconfig.
type MockDynconfigMockRecorder struct {
	mock *MockDynconfig
}

// NewMockDynconfig creates a new mock instance.
func NewMockDynconfig(ctrl *gomock.Controller) *MockDynconfig {
	mock := &MockDynconfig{ctrl: ctrl}
	mock.recorder = &MockDynconfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynconfig) EXPECT() *MockDynconfigMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockDynconfig) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockDynconfigMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockDynconfig)(nil).Refresh))
}

// Unmarshal mocks base method.
func (m *MockDynconfig) Unmarshal(rawVal any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", rawVal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockDynconfigMockRecorder) Unmarshal(rawVal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockDynconfig)(nil).Unmarshal), rawVal)
}
