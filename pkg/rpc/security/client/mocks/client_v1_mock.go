// Code generated by MockGen. DO NOT EDIT.
// Source: client_v1.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "d7y.io/api/pkg/apis/security/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClientV1 is a mock of ClientV1 interface.
type MockClientV1 struct {
	ctrl     *gomock.Controller
	recorder *MockClientV1MockRecorder
}

// MockClientV1MockRecorder is the mock recorder for MockClientV1.
type MockClientV1MockRecorder struct {
	mock *MockClientV1
}

// NewMockClientV1 creates a new mock instance.
func NewMockClientV1(ctrl *gomock.Controller) *MockClientV1 {
	mock := &MockClientV1{ctrl: ctrl}
	mock.recorder = &MockClientV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientV1) EXPECT() *MockClientV1MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientV1) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientV1MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientV1)(nil).Close))
}

// IssueCertificate mocks base method.
func (m *MockClientV1) IssueCertificate(arg0 context.Context, arg1 *v1.CertificateRequest, arg2 ...grpc.CallOption) (*v1.CertificateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueCertificate", varargs...)
	ret0, _ := ret[0].(*v1.CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockClientV1MockRecorder) IssueCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockClientV1)(nil).IssueCertificate), varargs...)
}
