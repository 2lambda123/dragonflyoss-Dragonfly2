// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// get scheduler server list according to client info.
	// call scene as follows:
	// 1. scheduler hosts is not found in config file
	//
	// 2. connection is fail for all servers
	//
	// 3. manager actively triggers fresh
	GetSchedulerHosts(ctx context.Context, in *NavigatorRequest, opts ...grpc.CallOption) (*SchedulerHosts, error)
	// get cdn server list according to client info
	GetCdnHosts(ctx context.Context, in *NavigatorRequest, opts ...grpc.CallOption) (*CdnHosts, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) GetSchedulerHosts(ctx context.Context, in *NavigatorRequest, opts ...grpc.CallOption) (*SchedulerHosts, error) {
	out := new(SchedulerHosts)
	err := c.cc.Invoke(ctx, "/manager.Manager/GetSchedulerHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCdnHosts(ctx context.Context, in *NavigatorRequest, opts ...grpc.CallOption) (*CdnHosts, error) {
	out := new(CdnHosts)
	err := c.cc.Invoke(ctx, "/manager.Manager/GetCdnHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	// get scheduler server list according to client info.
	// call scene as follows:
	// 1. scheduler hosts is not found in config file
	//
	// 2. connection is fail for all servers
	//
	// 3. manager actively triggers fresh
	GetSchedulerHosts(context.Context, *NavigatorRequest) (*SchedulerHosts, error)
	// get cdn server list according to client info
	GetCdnHosts(context.Context, *NavigatorRequest) (*CdnHosts, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) GetSchedulerHosts(context.Context, *NavigatorRequest) (*SchedulerHosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerHosts not implemented")
}
func (UnimplementedManagerServer) GetCdnHosts(context.Context, *NavigatorRequest) (*CdnHosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCdnHosts not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_GetSchedulerHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSchedulerHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GetSchedulerHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSchedulerHosts(ctx, req.(*NavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCdnHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCdnHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/GetCdnHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCdnHosts(ctx, req.(*NavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchedulerHosts",
			Handler:    _Manager_GetSchedulerHosts_Handler,
		},
		{
			MethodName: "GetCdnHosts",
			Handler:    _Manager_GetCdnHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/manager/manager.proto",
}
