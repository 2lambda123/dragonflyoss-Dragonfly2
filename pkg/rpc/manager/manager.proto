/*
 *     Copyright 2020 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package manager;

import "google/protobuf/empty.proto";
option go_package = "d7y.io/dragonfly/v2/pkg/rpc/manager";

message GetSchedulersRequest{
    // client ip
    string ip = 1;
    // client host name
    string host_name = 2;
    // json format: {vpcId:xxx,sn:xxx,group:xxx,...}
    string host_tag = 3;
}

message SchedulerNodes{
    // ip:port
    repeated string addrs = 2;
    HostInfo client_host = 3;
}

message KeepAliveRequest{
     // identify servers with hostname
     string host_name = 1;
     ResourceType type = 2;
}

message GetClusterConfigRequest{
    // identify servers with hostname
    string host_name = 1;
    ResourceType type = 2;
}

message ClientConfig{
    //......
}

message CdnConfig{
    string cluster_id = 1;

    string cluster_config = 2;
    int64  cluster_version = 3;

    string instance_config = 4;
    int64 instance_version = 5;
}

message SchedulerConfig{
    string cluster_id = 1;

    string cluster_config = 2;
    string client_config = 3;
    int64 cluster_version = 4;

    string instance_config = 5;
    int64 instance_version = 6;

    repeated ServerInfo cdn_hosts = 7;
}

message ClusterConfig{
    oneof config{
        SchedulerConfig scheduler_config = 2;
        CdnConfig cdn_config = 3;
    }
}

message ServerInfo{
    HostInfo host_info = 1;
    int32 rpc_port = 2;
    int32 down_port = 3;
}

message HostInfo{
    string ip = 1;
    string host_name = 2;
    // security isolation domain for network
    string security_domain = 3;
    map<string, string> proxy_domain = 4;
    // area|country|province|city|...
    string location = 5;
    string idc = 6;
    string net_topology = 7;
}

enum ResourceType {
    Scheduler = 0;
    Cdn = 1;
}

// Manager System RPC Service
service Manager{
    // get scheduler server list, using scene as follows:
    // 1. scheduler servers are not exist in local config
    //
    // 2. connection is fail for all servers from config,
    // so need retry one times to get latest servers
    //
    // 3. manager actively triggers fresh
    rpc GetSchedulers(GetSchedulersRequest)returns(SchedulerNodes){}

    // keep alive for cdn or scheduler
    rpc KeepAlive(KeepAliveRequest)returns(google.protobuf.Empty){}

    // get cluster config for cdn or scheduler(client) from manager
    rpc GetClusterConfig(GetClusterConfigRequest)returns(ClusterConfig){}
}
