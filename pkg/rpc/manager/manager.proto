/*
 *     Copyright 2020 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package manager;

import "pkg/rpc/base/base.proto";

option go_package = "github.com/dragonflyoss/Dragonfly2/pkg/rpc/manager";

message NavigatorRequest{
  string ip = 1;
  string host_name = 2;
  // json format: {vpcId:xxx,sn:xxx,group:xxx,...}
  string host_tag = 3;
}

message SchedulerHosts{
  base.ResponseState state = 1;

  repeated string addrs = 2; // ip:port
  ClientInfo client_info = 3;
}

message ClientInfo{
  string ip = 1;
  string host_name = 2;
  // security isolation domain for network
  string security_domain = 3;
  // area|country|province|city|...
  string location = 4;
  string idc = 5;
  string switch = 6;
}

message CdnHosts{
  base.ResponseState state = 1;

  repeated string addrs = 2; // ip:port
}

message HeartRequest{
  string ip = 1;
  string host_name = 2;
  bool is_scheduler = 3;
  bool is_cdn = 4;
}

message ManagementConfig{
  base.ResponseState state = 1;
}

// Manager System RPC Service
service Manager{
  // get scheduler server list according to client info.
  // call scene as follows:
  // 1. scheduler hosts is not found in config file
  //
  // 2. connection is fail for all servers
  //
  // 3. manager actively triggers fresh
  rpc GetSchedulers(NavigatorRequest)returns(SchedulerHosts){}
  // get cdn server list according to client info
  rpc GetCdnNodes(NavigatorRequest)returns(CdnHosts){}
  // keeps alive for cdn or scheduler and receives management configuration
  rpc KeepAlive(stream HeartRequest)returns(stream ManagementConfig){}
}
