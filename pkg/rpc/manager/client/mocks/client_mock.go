// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	v1 "d7y.io/api/pkg/apis/manager/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateModel mocks base method.
func (m *MockClient) CreateModel(arg0 context.Context, arg1 *v1.CreateModelRequest) (*v1.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(*v1.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockClientMockRecorder) CreateModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockClient)(nil).CreateModel), arg0, arg1)
}

// CreateModelVersion mocks base method.
func (m *MockClient) CreateModelVersion(arg0 context.Context, arg1 *v1.CreateModelVersionRequest) (*v1.ModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelVersion indicates an expected call of CreateModelVersion.
func (mr *MockClientMockRecorder) CreateModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelVersion", reflect.TypeOf((*MockClient)(nil).CreateModelVersion), arg0, arg1)
}

// DeleteModel mocks base method.
func (m *MockClient) DeleteModel(arg0 context.Context, arg1 *v1.DeleteModelRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockClientMockRecorder) DeleteModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockClient)(nil).DeleteModel), arg0, arg1)
}

// DeleteModelVersion mocks base method.
func (m *MockClient) DeleteModelVersion(arg0 context.Context, arg1 *v1.DeleteModelVersionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockClientMockRecorder) DeleteModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockClient)(nil).DeleteModelVersion), arg0, arg1)
}

// GetModel mocks base method.
func (m *MockClient) GetModel(arg0 context.Context, arg1 *v1.GetModelRequest) (*v1.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(*v1.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockClientMockRecorder) GetModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockClient)(nil).GetModel), arg0, arg1)
}

// GetModelVersion mocks base method.
func (m *MockClient) GetModelVersion(arg0 context.Context, arg1 *v1.GetModelVersionRequest) (*v1.ModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockClientMockRecorder) GetModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockClient)(nil).GetModelVersion), arg0, arg1)
}

// GetObjectStorage mocks base method.
func (m *MockClient) GetObjectStorage(arg0 context.Context, arg1 *v1.GetObjectStorageRequest) (*v1.ObjectStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectStorage", arg0, arg1)
	ret0, _ := ret[0].(*v1.ObjectStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectStorage indicates an expected call of GetObjectStorage.
func (mr *MockClientMockRecorder) GetObjectStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectStorage", reflect.TypeOf((*MockClient)(nil).GetObjectStorage), arg0, arg1)
}

// GetScheduler mocks base method.
func (m *MockClient) GetScheduler(arg0 context.Context, arg1 *v1.GetSchedulerRequest) (*v1.Scheduler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduler", arg0, arg1)
	ret0, _ := ret[0].(*v1.Scheduler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduler indicates an expected call of GetScheduler.
func (mr *MockClientMockRecorder) GetScheduler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduler", reflect.TypeOf((*MockClient)(nil).GetScheduler), arg0, arg1)
}

// KeepAlive mocks base method.
func (m *MockClient) KeepAlive(arg0 time.Duration, arg1 *v1.KeepAliveRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KeepAlive", arg0, arg1)
}

// KeepAlive indicates an expected call of KeepAlive.
func (mr *MockClientMockRecorder) KeepAlive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive", reflect.TypeOf((*MockClient)(nil).KeepAlive), arg0, arg1)
}

// ListBuckets mocks base method.
func (m *MockClient) ListBuckets(arg0 context.Context, arg1 *v1.ListBucketsRequest) (*v1.ListBucketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListBucketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockClientMockRecorder) ListBuckets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockClient)(nil).ListBuckets), arg0, arg1)
}

// ListModelVersions mocks base method.
func (m *MockClient) ListModelVersions(arg0 context.Context, arg1 *v1.ListModelVersionsRequest) (*v1.ListModelVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelVersions", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListModelVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelVersions indicates an expected call of ListModelVersions.
func (mr *MockClientMockRecorder) ListModelVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelVersions", reflect.TypeOf((*MockClient)(nil).ListModelVersions), arg0, arg1)
}

// ListModels mocks base method.
func (m *MockClient) ListModels(arg0 context.Context, arg1 *v1.ListModelsRequest) (*v1.ListModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockClientMockRecorder) ListModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockClient)(nil).ListModels), arg0, arg1)
}

// ListSchedulers mocks base method.
func (m *MockClient) ListSchedulers(arg0 context.Context, arg1 *v1.ListSchedulersRequest) (*v1.ListSchedulersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListSchedulersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulers indicates an expected call of ListSchedulers.
func (mr *MockClientMockRecorder) ListSchedulers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulers", reflect.TypeOf((*MockClient)(nil).ListSchedulers), arg0, arg1)
}

// UpdateModel mocks base method.
func (m *MockClient) UpdateModel(arg0 context.Context, arg1 *v1.UpdateModelRequest) (*v1.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModel", arg0, arg1)
	ret0, _ := ret[0].(*v1.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel.
func (mr *MockClientMockRecorder) UpdateModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockClient)(nil).UpdateModel), arg0, arg1)
}

// UpdateModelVersion mocks base method.
func (m *MockClient) UpdateModelVersion(arg0 context.Context, arg1 *v1.UpdateModelVersionRequest) (*v1.ModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockClientMockRecorder) UpdateModelVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockClient)(nil).UpdateModelVersion), arg0, arg1)
}

// UpdateScheduler mocks base method.
func (m *MockClient) UpdateScheduler(arg0 context.Context, arg1 *v1.UpdateSchedulerRequest) (*v1.Scheduler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduler", arg0, arg1)
	ret0, _ := ret[0].(*v1.Scheduler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduler indicates an expected call of UpdateScheduler.
func (mr *MockClientMockRecorder) UpdateScheduler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduler", reflect.TypeOf((*MockClient)(nil).UpdateScheduler), arg0, arg1)
}

// UpdateSeedPeer mocks base method.
func (m *MockClient) UpdateSeedPeer(arg0 context.Context, arg1 *v1.UpdateSeedPeerRequest) (*v1.SeedPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeedPeer", arg0, arg1)
	ret0, _ := ret[0].(*v1.SeedPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeedPeer indicates an expected call of UpdateSeedPeer.
func (mr *MockClientMockRecorder) UpdateSeedPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeedPeer", reflect.TypeOf((*MockClient)(nil).UpdateSeedPeer), arg0, arg1)
}
