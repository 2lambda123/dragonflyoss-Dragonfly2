/*
 *     Copyright 2020 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// manage and schedule download tasks
// core model: peerHost->peers->peerTask->pieceTasks and task->peerTasks

syntax = "proto3";

package scheduler;

import "pkg/rpc/base/base.proto";

option go_package = "github.com/dragonflyoss/Dragonfly2/pkg/rpc/scheduler";

message PeerTaskRequest{
  string url = 1;
  // regex format, used for task id generator, assimilating different urls
  string filter = 2;
  // biz_id and md5 are used for task id generator to distinguish the same urls
  // md5 is also used to check consistency about file content
  string biz_id = 3; // caller's biz id that can be any string
  base.UrlMeta url_mata = 4; // downloaded file content md5
  string pid = 5; // peer id
  PeerHost peer_host = 6; // peer host info
}

message PeerHost{
  // different uuid is different peer host
  // to avoid conflict, need check other information(ip„ÄÅport...)
  string uuid = 1;
  string ip = 2;
  int32 port = 3; // peer server http port
  string host_name = 4;
  string security_domain = 5; // security isolation domain for network
  string location = 6; // area|country|province|city|...
  string idc = 7;
  string switch = 8; // network device construct, xx|yy|zz
}

message PiecePackage{
  message PieceTask{
    int32 piece_num = 1;
    string piece_range = 2;
    string piece_md5 = 3;
    string src_pid = 4;
    string dst_pid = 5;
    string dst_addr = 6; // ip:port
    uint64 piece_offset = 7;
    base.PieceStyle piece_style = 8;
  }

  base.ResponseState state = 1;
  string task_id = 2;
  string pid = 3; // equals to src pid
  repeated PieceTask piece_tasks = 4;
  // whether or not peer task is finish, piece_tasks is empty if true
  bool done = 5;
  int64 content_length = 6;
}

message PieceResult{
  string task_id = 1;
  string src_pid = 2;
  string dst_pid = 3;
  int32 piece_num = 4;
  string piece_range = 5;
  bool success = 6;
  base.Code error_code = 7; // for success is false
  uint32 cost = 8; // millisecond unit
}

// with these, scheduler can analyze registered peer task and finished peer task
message PeerResult{
  string task_id = 1;
  string pid = 2;
  string src_ip = 3;
  string security_domain = 4;
  string idc = 5;
  string url = 6;
  int64 content_length = 7; // total content length(byte)
  int64 traffic = 8; // network traffic usage(byte)
  uint32 cost = 9; // millisecond unit
  bool success = 10;
  base.Code error_code = 11;
}

message PeerTarget{
  string task_id = 1;
  string pid = 2;
}

// scheduling life cycle for the peer task
service Scheduler{
  // register task for specified peer
  rpc RegisterPeerTask(PeerTaskRequest)returns(PiecePackage){}

  // push piece result and pull piece tasks
  rpc PullPieceTasks(stream PieceResult)returns(stream PiecePackage){}

  // report whole file's downloading result for the peer
  rpc ReportPeerResult(PeerResult)returns(base.ResponseState){}

  // make peer leaving from scheduling overlay
  rpc LeaveTask(PeerTarget)returns(base.ResponseState){}
}