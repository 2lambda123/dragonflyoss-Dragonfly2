/*
 *     Copyright 2020 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package scheduler;

import "pkg/rpc/base/base.proto";

option go_package = "github.com/dragonflyoss/Dragonfly2/pkg/rpc/scheduler";

message PeerTaskRequest{
  string url = 1;
  // filter is a regex string,
  // used for task id generator, assimilating different urls
  string filter = 2;
  // biz_id is used for task id generator to distinguish same urls
  string biz_id = 3;
  base.UrlMeta url_mata = 4;
  string peer_id = 5;
  PeerHost peer_host = 6;
  base.HostLoad host_load = 7;
}

message RegisterResult{
  base.ResponseState state = 1;

  string task_id = 2;
}

message PeerHost{
  // different uuid represents different peer host,
  // avoiding conflict, need check other information(ip„ÄÅport...)
  string uuid = 1;
  string ip = 2;
  // rpc service port for peer
  int32 port = 3;
  string host_name = 4;
  // security isolation domain for network
  string security_domain = 5;
  // area|country|province|city|...
  string location = 6;
  string idc = 7;
  // network device construct, xx|yy|zz
  string switch = 8;
}

message DestHost{
  string ip = 1;
  string port = 2;
  string peer_id = 3;
}
message PeerPacket{
  base.ResponseState state = 1;

  string task_id = 2;
  // source peer id
  string src_pid = 3;

  // concurrent downloading count from main peer
  int32 parallel_count = 4;
  DestHost main_peer = 5;
  repeated DestHost steal_peers = 6;
}

message PieceResult{
  string task_id = 1;
  string src_pid = 2;
  string dst_pid = 3;
  int32 piece_num = 4;
  string piece_range = 5;
  uint64 begin_time = 6;
  uint64 end_time = 7;
  bool success = 8;
  base.Code code = 9;
  base.HostLoad host_load = 10;
  int32 finished_count = 11;
}

message PeerResult{
  string task_id = 1;
  string peer_id = 2;
  string src_ip = 3;
  string security_domain = 4;
  string idc = 5;
  string url = 6;
  // total content length(byte)
  int64 content_length = 7;
  // network traffic usage(byte)
  int64 traffic = 8;
  // millisecond unit
  uint32 cost = 9;
  bool success = 10;
  base.Code code = 11;
}

message PeerTarget{
  string task_id = 1;
  string peer_id = 2;
}

// Scheduler System RPC Service
service Scheduler{
  // RegisterPeerTask registers a peer into one task
  rpc RegisterPeerTask(PeerTaskRequest)returns(RegisterResult){}

  // ReportPieceResult reports piece results and receives peer packets.
  // when migrating to another scheduler,
  // it will send the last piece result to the new scheduler.
  rpc ReportPieceResult(stream PieceResult)returns(stream PeerPacket){}

  // ReportPeerResult reports downloading result for the peer task.
  rpc ReportPeerResult(PeerResult)returns(base.ResponseState){}

  // LeaveTask makes the peer leaving from scheduling overlay for the task.
  rpc LeaveTask(PeerTarget)returns(base.ResponseState){}
}