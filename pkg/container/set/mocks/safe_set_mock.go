// Code generated by MockGen. DO NOT EDIT.
// Source: safe_set.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSafeSet is a mock of SafeSet interface.
type MockSafeSet struct {
	ctrl     *gomock.Controller
	recorder *MockSafeSetMockRecorder
}

// MockSafeSetMockRecorder is the mock recorder for MockSafeSet.
type MockSafeSetMockRecorder struct {
	mock *MockSafeSet
}

// NewMockSafeSet creates a new mock instance.
func NewMockSafeSet(ctrl *gomock.Controller) *MockSafeSet {
	mock := &MockSafeSet{ctrl: ctrl}
	mock.recorder = &MockSafeSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSafeSet) EXPECT() *MockSafeSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSafeSet) Add(arg0 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSafeSetMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSafeSet)(nil).Add), arg0)
}

// Clear mocks base method.
func (m *MockSafeSet) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockSafeSetMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSafeSet)(nil).Clear))
}

// Contains mocks base method.
func (m *MockSafeSet) Contains(arg0 ...any) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Contains", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockSafeSetMockRecorder) Contains(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSafeSet)(nil).Contains), arg0...)
}

// Delete mocks base method.
func (m *MockSafeSet) Delete(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockSafeSetMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSafeSet)(nil).Delete), arg0)
}

// Len mocks base method.
func (m *MockSafeSet) Len() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSafeSetMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSafeSet)(nil).Len))
}

// Range mocks base method.
func (m *MockSafeSet) Range(arg0 func(any) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", arg0)
}

// Range indicates an expected call of Range.
func (mr *MockSafeSetMockRecorder) Range(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSafeSet)(nil).Range), arg0)
}

// Values mocks base method.
func (m *MockSafeSet) Values() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]any)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockSafeSetMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockSafeSet)(nil).Values))
}
