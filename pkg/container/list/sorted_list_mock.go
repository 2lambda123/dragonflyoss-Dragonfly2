// Code generated by MockGen. DO NOT EDIT.
// Source: sorted_list.go

// Package list is a generated GoMock package.
package list

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// SortedValue mocks base method.
func (m *MockItem) SortedValue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedValue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SortedValue indicates an expected call of SortedValue.
func (mr *MockItemMockRecorder) SortedValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedValue", reflect.TypeOf((*MockItem)(nil).SortedValue))
}

// MockSortedList is a mock of SortedList interface.
type MockSortedList struct {
	ctrl     *gomock.Controller
	recorder *MockSortedListMockRecorder
}

// MockSortedListMockRecorder is the mock recorder for MockSortedList.
type MockSortedListMockRecorder struct {
	mock *MockSortedList
}

// NewMockSortedList creates a new mock instance.
func NewMockSortedList(ctrl *gomock.Controller) *MockSortedList {
	mock := &MockSortedList{ctrl: ctrl}
	mock.recorder = &MockSortedListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSortedList) EXPECT() *MockSortedListMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockSortedList) Contains(arg0 Item) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockSortedListMockRecorder) Contains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSortedList)(nil).Contains), arg0)
}

// Insert mocks base method.
func (m *MockSortedList) Insert(arg0 Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", arg0)
}

// Insert indicates an expected call of Insert.
func (mr *MockSortedListMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSortedList)(nil).Insert), arg0)
}

// Len mocks base method.
func (m *MockSortedList) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSortedListMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSortedList)(nil).Len))
}

// Range mocks base method.
func (m *MockSortedList) Range(arg0 func(Item) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", arg0)
}

// Range indicates an expected call of Range.
func (mr *MockSortedListMockRecorder) Range(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSortedList)(nil).Range), arg0)
}

// Remove mocks base method.
func (m *MockSortedList) Remove(arg0 Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockSortedListMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSortedList)(nil).Remove), arg0)
}

// ReverseRange mocks base method.
func (m *MockSortedList) ReverseRange(fn func(Item) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReverseRange", fn)
}

// ReverseRange indicates an expected call of ReverseRange.
func (mr *MockSortedListMockRecorder) ReverseRange(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseRange", reflect.TypeOf((*MockSortedList)(nil).ReverseRange), fn)
}
