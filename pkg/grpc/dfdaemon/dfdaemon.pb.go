//
//     Copyright 2020 The Dragonfly Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// dfdaemon is responsible for transporting/saving blocks between peers
// and managing client download requests

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: pkg/grpc/dfdaemon/dfdaemon.proto

package dfdaemon

import (
	context "context"
	base "github.com/dragonflyoss/Dragonfly2/pkg/grpc/base"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// download content with the url, but not only for http protocol
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// blocks will be written to output path directly,
	// at the same time, dfdaemon workspace also makes soft link to the output
	Output  string        `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	UrlMeta *base.UrlMeta `protobuf:"bytes,3,opt,name=url_meta,json=urlMeta,proto3" json:"url_meta,omitempty"`
	// caller business id
	BizId string `protobuf:"bytes,4,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	// regex format
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescGZIP(), []int{0}
}

func (x *DownloadRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *DownloadRequest) GetUrlMeta() *base.UrlMeta {
	if x != nil {
		return x.UrlMeta
	}
	return nil
}

func (x *DownloadRequest) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *DownloadRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type DownloadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           *base.ResponseState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	TaskId          string              `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CompletedLength uint64              `protobuf:"varint,3,opt,name=completed_length,json=completedLength,proto3" json:"completed_length,omitempty"`
	Done            bool                `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"` // done with success or fail
}

func (x *DownloadResult) Reset() {
	*x = DownloadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResult) ProtoMessage() {}

func (x *DownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResult.ProtoReflect.Descriptor instead.
func (*DownloadResult) Descriptor() ([]byte, []int) {
	return file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescGZIP(), []int{1}
}

func (x *DownloadResult) GetState() *base.ResponseState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DownloadResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DownloadResult) GetCompletedLength() uint64 {
	if x != nil {
		return x.CompletedLength
	}
	return 0
}

func (x *DownloadResult) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

var File_pkg_grpc_dfdaemon_dfdaemon_proto protoreflect.FileDescriptor

var file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x66, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x1a, 0x18, 0x70, 0x6b,
	0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x72,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01,
	0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x32, 0x51, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x2e,
	0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x66, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x6f, 0x73,
	0x73, 0x2f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x32, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescOnce sync.Once
	file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescData = file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDesc
)

func file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescGZIP() []byte {
	file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescOnce.Do(func() {
		file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescData)
	})
	return file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDescData
}

var file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_grpc_dfdaemon_dfdaemon_proto_goTypes = []interface{}{
	(*DownloadRequest)(nil),    // 0: dfdaemon.DownloadRequest
	(*DownloadResult)(nil),     // 1: dfdaemon.DownloadResult
	(*base.UrlMeta)(nil),       // 2: base.UrlMeta
	(*base.ResponseState)(nil), // 3: base.ResponseState
}
var file_pkg_grpc_dfdaemon_dfdaemon_proto_depIdxs = []int32{
	2, // 0: dfdaemon.DownloadRequest.url_meta:type_name -> base.UrlMeta
	3, // 1: dfdaemon.DownloadResult.state:type_name -> base.ResponseState
	0, // 2: dfdaemon.Downloader.Download:input_type -> dfdaemon.DownloadRequest
	1, // 3: dfdaemon.Downloader.Download:output_type -> dfdaemon.DownloadResult
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_grpc_dfdaemon_dfdaemon_proto_init() }
func file_pkg_grpc_dfdaemon_dfdaemon_proto_init() {
	if File_pkg_grpc_dfdaemon_dfdaemon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_grpc_dfdaemon_dfdaemon_proto_goTypes,
		DependencyIndexes: file_pkg_grpc_dfdaemon_dfdaemon_proto_depIdxs,
		MessageInfos:      file_pkg_grpc_dfdaemon_dfdaemon_proto_msgTypes,
	}.Build()
	File_pkg_grpc_dfdaemon_dfdaemon_proto = out.File
	file_pkg_grpc_dfdaemon_dfdaemon_proto_rawDesc = nil
	file_pkg_grpc_dfdaemon_dfdaemon_proto_goTypes = nil
	file_pkg_grpc_dfdaemon_dfdaemon_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DownloaderClient is the client API for Downloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownloaderClient interface {
	// download content by dragonfly
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Downloader_DownloadClient, error)
}

type downloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloaderClient(cc grpc.ClientConnInterface) DownloaderClient {
	return &downloaderClient{cc}
}

func (c *downloaderClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Downloader_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Downloader_serviceDesc.Streams[0], "/dfdaemon.Downloader/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloaderDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Downloader_DownloadClient interface {
	Recv() (*DownloadResult, error)
	grpc.ClientStream
}

type downloaderDownloadClient struct {
	grpc.ClientStream
}

func (x *downloaderDownloadClient) Recv() (*DownloadResult, error) {
	m := new(DownloadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloaderServer is the server API for Downloader service.
type DownloaderServer interface {
	// download content by dragonfly
	Download(*DownloadRequest, Downloader_DownloadServer) error
}

// UnimplementedDownloaderServer can be embedded to have forward compatible implementations.
type UnimplementedDownloaderServer struct {
}

func (*UnimplementedDownloaderServer) Download(*DownloadRequest, Downloader_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterDownloaderServer(s *grpc.Server, srv DownloaderServer) {
	s.RegisterService(&_Downloader_serviceDesc, srv)
}

func _Downloader_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloaderServer).Download(m, &downloaderDownloadServer{stream})
}

type Downloader_DownloadServer interface {
	Send(*DownloadResult) error
	grpc.ServerStream
}

type downloaderDownloadServer struct {
	grpc.ServerStream
}

func (x *downloaderDownloadServer) Send(m *DownloadResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Downloader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfdaemon.Downloader",
	HandlerType: (*DownloaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Downloader_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/dfdaemon/dfdaemon.proto",
}
