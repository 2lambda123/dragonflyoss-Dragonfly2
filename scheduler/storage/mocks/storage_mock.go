// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	storage "d7y.io/dragonfly/v2/scheduler/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearProbes mocks base method.
func (m *MockStorage) ClearProbes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearProbes")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearProbes indicates an expected call of ClearProbes.
func (mr *MockStorageMockRecorder) ClearProbes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearProbes", reflect.TypeOf((*MockStorage)(nil).ClearProbes))
}

// ClearRecord mocks base method.
func (m *MockStorage) ClearRecord() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRecord")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRecord indicates an expected call of ClearRecord.
func (mr *MockStorageMockRecorder) ClearRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRecord", reflect.TypeOf((*MockStorage)(nil).ClearRecord))
}

// Create mocks base method.
func (m *MockStorage) Create(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), arg0)
}

// ListProbes mocks base method.
func (m *MockStorage) ListProbes() ([]storage.Probes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProbes")
	ret0, _ := ret[0].([]storage.Probes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProbes indicates an expected call of ListProbes.
func (mr *MockStorageMockRecorder) ListProbes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProbes", reflect.TypeOf((*MockStorage)(nil).ListProbes))
}

// ListRecord mocks base method.
func (m *MockStorage) ListRecord() ([]storage.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecord")
	ret0, _ := ret[0].([]storage.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecord indicates an expected call of ListRecord.
func (mr *MockStorageMockRecorder) ListRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecord", reflect.TypeOf((*MockStorage)(nil).ListRecord))
}

// OpenProbes mocks base method.
func (m *MockStorage) OpenProbes() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenProbes")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenProbes indicates an expected call of OpenProbes.
func (mr *MockStorageMockRecorder) OpenProbes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenProbes", reflect.TypeOf((*MockStorage)(nil).OpenProbes))
}

// OpenRecord mocks base method.
func (m *MockStorage) OpenRecord() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRecord")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenRecord indicates an expected call of OpenRecord.
func (mr *MockStorageMockRecorder) OpenRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRecord", reflect.TypeOf((*MockStorage)(nil).OpenRecord))
}

// ProbesCount mocks base method.
func (m *MockStorage) ProbesCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbesCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ProbesCount indicates an expected call of ProbesCount.
func (mr *MockStorageMockRecorder) ProbesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbesCount", reflect.TypeOf((*MockStorage)(nil).ProbesCount))
}

// RecordCount mocks base method.
func (m *MockStorage) RecordCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RecordCount indicates an expected call of RecordCount.
func (mr *MockStorageMockRecorder) RecordCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCount", reflect.TypeOf((*MockStorage)(nil).RecordCount))
}
