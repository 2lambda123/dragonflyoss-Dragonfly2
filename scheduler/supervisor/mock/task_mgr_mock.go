// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wys/GolandProjects/Dragonfly2/scheduler/daemon/task_mgr.go

package mock

import (
	types "d7y.io/dragonfly/v2/scheduler/supervisor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskMgr is a mock of TaskMgr interface
type MockTaskMgr struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMgrMockRecorder
}

// MockTaskMgrMockRecorder is the mock recorder for MockTaskMgr
type MockTaskMgrMockRecorder struct {
	mock *MockTaskMgr
}

// NewMockTaskMgr creates a new mock instance
func NewMockTaskMgr(ctrl *gomock.Controller) *MockTaskMgr {
	mock := &MockTaskMgr{ctrl: ctrl}
	mock.recorder = &MockTaskMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTaskMgr) EXPECT() *MockTaskMgrMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockTaskMgr) Add(task *types.Task) {
	_m.ctrl.Call(_m, "Add", task)
}

// Add indicates an expected call of Add
func (_mr *MockTaskMgrMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockTaskMgr)(nil).Add), arg0)
}

// Get mocks base method
func (_m *MockTaskMgr) Get(taskID string) (*types.Task, bool) {
	ret := _m.ctrl.Call(_m, "Get", taskID)
	ret0, _ := ret[0].(*types.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTaskMgrMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTaskMgr)(nil).Get), arg0)
}

// Delete mocks base method
func (_m *MockTaskMgr) Delete(taskID string) {
	_m.ctrl.Call(_m, "Delete", taskID)
}

// Delete indicates an expected call of Delete
func (_mr *MockTaskMgrMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockTaskMgr)(nil).Delete), arg0)
}

// GetOrAdd mocks base method
func (_m *MockTaskMgr) GetOrAdd(task *types.Task) (*types.Task, bool) {
	ret := _m.ctrl.Call(_m, "GetOrAdd", task)
	ret0, _ := ret[0].(*types.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOrAdd indicates an expected call of GetOrAdd
func (_mr *MockTaskMgrMockRecorder) GetOrAdd(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetOrAdd", reflect.TypeOf((*MockTaskMgr)(nil).GetOrAdd), arg0)
}
