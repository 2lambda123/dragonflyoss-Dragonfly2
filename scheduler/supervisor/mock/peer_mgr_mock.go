// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wys/GolandProjects/Dragonfly2/scheduler/daemon/peer_mgr.go

package mock

import (
	types "d7y.io/dragonfly/v2/scheduler/supervisor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockPeerMgr is a mock of PeerMgr interface
type MockPeerMgr struct {
	ctrl     *gomock.Controller
	recorder *MockPeerMgrMockRecorder
}

// MockPeerMgrMockRecorder is the mock recorder for MockPeerMgr
type MockPeerMgrMockRecorder struct {
	mock *MockPeerMgr
}

// NewMockPeerMgr creates a new mock instance
func NewMockPeerMgr(ctrl *gomock.Controller) *MockPeerMgr {
	mock := &MockPeerMgr{ctrl: ctrl}
	mock.recorder = &MockPeerMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPeerMgr) EXPECT() *MockPeerMgrMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockPeerMgr) Add(peer *types.Peer) {
	_m.ctrl.Call(_m, "Add", peer)
}

// Add indicates an expected call of Add
func (_mr *MockPeerMgrMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockPeerMgr)(nil).Add), arg0)
}

// Get mocks base method
func (_m *MockPeerMgr) Get(peerID string) (*types.Peer, bool) {
	ret := _m.ctrl.Call(_m, "Get", peerID)
	ret0, _ := ret[0].(*types.Peer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockPeerMgrMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockPeerMgr)(nil).Get), arg0)
}

// Delete mocks base method
func (_m *MockPeerMgr) Delete(peerID string) {
	_m.ctrl.Call(_m, "Delete", peerID)
}

// Delete indicates an expected call of Delete
func (_mr *MockPeerMgrMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockPeerMgr)(nil).Delete), arg0)
}

// ListPeersByTask mocks base method
func (_m *MockPeerMgr) ListPeersByTask(taskID string) []*types.Peer {
	ret := _m.ctrl.Call(_m, "ListPeersByTask", taskID)
	ret0, _ := ret[0].([]*types.Peer)
	return ret0
}

// ListPeersByTask indicates an expected call of ListPeersByTask
func (_mr *MockPeerMgrMockRecorder) ListPeersByTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListPeersByTask", reflect.TypeOf((*MockPeerMgr)(nil).ListPeersByTask), arg0)
}

// ListPeers mocks base method
func (_m *MockPeerMgr) ListPeers() *sync.Map {
	ret := _m.ctrl.Call(_m, "ListPeers")
	ret0, _ := ret[0].(*sync.Map)
	return ret0
}

// ListPeers indicates an expected call of ListPeers
func (_mr *MockPeerMgrMockRecorder) ListPeers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListPeers", reflect.TypeOf((*MockPeerMgr)(nil).ListPeers))
}

// Pick mocks base method
func (_m *MockPeerMgr) Pick(task *types.Task, limit int, pickFn func(*types.Peer) bool) []*types.Peer {
	ret := _m.ctrl.Call(_m, "Pick", task, limit, pickFn)
	ret0, _ := ret[0].([]*types.Peer)
	return ret0
}

// Pick indicates an expected call of Pick
func (_mr *MockPeerMgrMockRecorder) Pick(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Pick", reflect.TypeOf((*MockPeerMgr)(nil).Pick), arg0, arg1, arg2)
}

// PickReverse mocks base method
func (_m *MockPeerMgr) PickReverse(task *types.Task, limit int, pickFn func(*types.Peer) bool) []*types.Peer {
	ret := _m.ctrl.Call(_m, "PickReverse", task, limit, pickFn)
	ret0, _ := ret[0].([]*types.Peer)
	return ret0
}

// PickReverse indicates an expected call of PickReverse
func (_mr *MockPeerMgrMockRecorder) PickReverse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PickReverse", reflect.TypeOf((*MockPeerMgr)(nil).PickReverse), arg0, arg1, arg2)
}
