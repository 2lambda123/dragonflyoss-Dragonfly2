// Code generated by MockGen. DO NOT EDIT.
// Source: .\network_topology.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	sync "sync"
	time "time"

	networktopology "d7y.io/dragonfly/v2/scheduler/networktopology"
	resource "d7y.io/dragonfly/v2/scheduler/resource"
	gomock "github.com/golang/mock/gomock"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockNetworkTopology is a mock of NetworkTopology interface.
type MockNetworkTopology struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkTopologyMockRecorder
}

// MockNetworkTopologyMockRecorder is the mock recorder for MockNetworkTopology.
type MockNetworkTopologyMockRecorder struct {
	mock *MockNetworkTopology
}

// NewMockNetworkTopology creates a new mock instance.
func NewMockNetworkTopology(ctrl *gomock.Controller) *MockNetworkTopology {
	mock := &MockNetworkTopology{ctrl: ctrl}
	mock.recorder = &MockNetworkTopologyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkTopology) EXPECT() *MockNetworkTopologyMockRecorder {
	return m.recorder
}

// DeleteEdge mocks base method.
func (m *MockNetworkTopology) DeleteEdge(src, dest string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEdge", src, dest)
}

// DeleteEdge indicates an expected call of DeleteEdge.
func (mr *MockNetworkTopologyMockRecorder) DeleteEdge(src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdge", reflect.TypeOf((*MockNetworkTopology)(nil).DeleteEdge), src, dest)
}

// DeleteParents mocks base method.
func (m *MockNetworkTopology) DeleteParents(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteParents", arg0)
}

// DeleteParents indicates an expected call of DeleteParents.
func (mr *MockNetworkTopologyMockRecorder) DeleteParents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParents", reflect.TypeOf((*MockNetworkTopology)(nil).DeleteParents), arg0)
}

// DeleteSyncHost mocks base method.
func (m *MockNetworkTopology) DeleteSyncHost(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSyncHost", arg0)
}

// DeleteSyncHost indicates an expected call of DeleteSyncHost.
func (mr *MockNetworkTopologyMockRecorder) DeleteSyncHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncHost", reflect.TypeOf((*MockNetworkTopology)(nil).DeleteSyncHost), arg0)
}

// FindProbes mocks base method.
func (m *MockNetworkTopology) FindProbes(host *resource.Host) []*resource.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProbes", host)
	ret0, _ := ret[0].([]*resource.Host)
	return ret0
}

// FindProbes indicates an expected call of FindProbes.
func (mr *MockNetworkTopologyMockRecorder) FindProbes(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProbes", reflect.TypeOf((*MockNetworkTopology)(nil).FindProbes), host)
}

// FindShortestPaths mocks base method.
func (m *MockNetworkTopology) FindShortestPaths(src string, dests []string) []time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortestPaths", src, dests)
	ret0, _ := ret[0].([]time.Duration)
	return ret0
}

// FindShortestPaths indicates an expected call of FindShortestPaths.
func (mr *MockNetworkTopologyMockRecorder) FindShortestPaths(src, dests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortestPaths", reflect.TypeOf((*MockNetworkTopology)(nil).FindShortestPaths), src, dests)
}

// GetHost mocks base method.
func (m *MockNetworkTopology) GetHost(arg0 string) (*resource.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(*resource.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockNetworkTopologyMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockNetworkTopology)(nil).GetHost), arg0)
}

// LoadAverageRTT mocks base method.
func (m *MockNetworkTopology) LoadAverageRTT(src, dest string) (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAverageRTT", src, dest)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadAverageRTT indicates an expected call of LoadAverageRTT.
func (mr *MockNetworkTopologyMockRecorder) LoadAverageRTT(src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAverageRTT", reflect.TypeOf((*MockNetworkTopology)(nil).LoadAverageRTT), src, dest)
}

// LoadEdge mocks base method.
func (m *MockNetworkTopology) LoadEdge(src, dest string) (*networktopology.Probes, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEdge", src, dest)
	ret0, _ := ret[0].(*networktopology.Probes)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadEdge indicates an expected call of LoadEdge.
func (mr *MockNetworkTopologyMockRecorder) LoadEdge(src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEdge", reflect.TypeOf((*MockNetworkTopology)(nil).LoadEdge), src, dest)
}

// LoadParents mocks base method.
func (m *MockNetworkTopology) LoadParents(arg0 string) (*sync.Map, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadParents", arg0)
	ret0, _ := ret[0].(*sync.Map)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadParents indicates an expected call of LoadParents.
func (mr *MockNetworkTopologyMockRecorder) LoadParents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadParents", reflect.TypeOf((*MockNetworkTopology)(nil).LoadParents), arg0)
}

// Serve mocks base method.
func (m *MockNetworkTopology) Serve() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockNetworkTopologyMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockNetworkTopology)(nil).Serve))
}

// Stop mocks base method.
func (m *MockNetworkTopology) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkTopologyMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetworkTopology)(nil).Stop))
}

// StoreEdge mocks base method.
func (m *MockNetworkTopology) StoreEdge(src, dest string, probes *networktopology.Probes) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreEdge", src, dest, probes)
}

// StoreEdge indicates an expected call of StoreEdge.
func (mr *MockNetworkTopologyMockRecorder) StoreEdge(src, dest, probes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEdge", reflect.TypeOf((*MockNetworkTopology)(nil).StoreEdge), src, dest, probes)
}

// StoreParents mocks base method.
func (m *MockNetworkTopology) StoreParents(key string, parents *sync.Map) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreParents", key, parents)
}

// StoreParents indicates an expected call of StoreParents.
func (mr *MockNetworkTopologyMockRecorder) StoreParents(key, parents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreParents", reflect.TypeOf((*MockNetworkTopology)(nil).StoreParents), key, parents)
}

// StoreProbe mocks base method.
func (m *MockNetworkTopology) StoreProbe(src, dest string, Host *resource.Host, RTT *durationpb.Duration, UpdatedAt *timestamppb.Timestamp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreProbe", src, dest, Host, RTT, UpdatedAt)
}

// StoreProbe indicates an expected call of StoreProbe.
func (mr *MockNetworkTopologyMockRecorder) StoreProbe(src, dest, Host, RTT, UpdatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProbe", reflect.TypeOf((*MockNetworkTopology)(nil).StoreProbe), src, dest, Host, RTT, UpdatedAt)
}

// StoreSyncHost mocks base method.
func (m *MockNetworkTopology) StoreSyncHost(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreSyncHost", arg0)
}

// StoreSyncHost indicates an expected call of StoreSyncHost.
func (mr *MockNetworkTopologyMockRecorder) StoreSyncHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSyncHost", reflect.TypeOf((*MockNetworkTopology)(nil).StoreSyncHost), arg0)
}

// SyncNetworkTopology mocks base method.
func (m *MockNetworkTopology) SyncNetworkTopology() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNetworkTopology")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncNetworkTopology indicates an expected call of SyncNetworkTopology.
func (mr *MockNetworkTopologyMockRecorder) SyncNetworkTopology() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNetworkTopology", reflect.TypeOf((*MockNetworkTopology)(nil).SyncNetworkTopology))
}

// ToMatrix mocks base method.
func (m *MockNetworkTopology) ToMatrix() ([][]time.Duration, int, map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMatrix")
	ret0, _ := ret[0].([][]time.Duration)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(map[string]int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ToMatrix indicates an expected call of ToMatrix.
func (mr *MockNetworkTopologyMockRecorder) ToMatrix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMatrix", reflect.TypeOf((*MockNetworkTopology)(nil).ToMatrix))
}
