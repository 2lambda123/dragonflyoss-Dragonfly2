// Code generated by MockGen. DO NOT EDIT.
// Source: network_topology.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	networktopology "d7y.io/dragonfly/v2/scheduler/networktopology"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkTopology is a mock of NetworkTopology interface.
type MockNetworkTopology struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkTopologyMockRecorder
}

// MockNetworkTopologyMockRecorder is the mock recorder for MockNetworkTopology.
type MockNetworkTopologyMockRecorder struct {
	mock *MockNetworkTopology
}

// NewMockNetworkTopology creates a new mock instance.
func NewMockNetworkTopology(ctrl *gomock.Controller) *MockNetworkTopology {
	mock := &MockNetworkTopology{ctrl: ctrl}
	mock.recorder = &MockNetworkTopologyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkTopology) EXPECT() *MockNetworkTopologyMockRecorder {
	return m.recorder
}

// DeleteHost mocks base method.
func (m *MockNetworkTopology) DeleteHost(hostID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", hostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockNetworkTopologyMockRecorder) DeleteHost(hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockNetworkTopology)(nil).DeleteHost), hostID)
}

// LoadDestHosts mocks base method.
func (m *MockNetworkTopology) LoadDestHosts(hostID string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDestHosts", hostID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadDestHosts indicates an expected call of LoadDestHosts.
func (mr *MockNetworkTopologyMockRecorder) LoadDestHosts(hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDestHosts", reflect.TypeOf((*MockNetworkTopology)(nil).LoadDestHosts), hostID)
}

// ProbeCount mocks base method.
func (m *MockNetworkTopology) ProbeCount(hostID string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbeCount", hostID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// ProbeCount indicates an expected call of ProbeCount.
func (mr *MockNetworkTopologyMockRecorder) ProbeCount(hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbeCount", reflect.TypeOf((*MockNetworkTopology)(nil).ProbeCount), hostID)
}

// ProbedCount mocks base method.
func (m *MockNetworkTopology) ProbedCount(hostID string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbedCount", hostID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// ProbedCount indicates an expected call of ProbedCount.
func (mr *MockNetworkTopologyMockRecorder) ProbedCount(hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbedCount", reflect.TypeOf((*MockNetworkTopology)(nil).ProbedCount), hostID)
}

// StoreProbe mocks base method.
func (m *MockNetworkTopology) StoreProbe(src, dest string, probe *networktopology.Probe) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProbe", src, dest, probe)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoreProbe indicates an expected call of StoreProbe.
func (mr *MockNetworkTopologyMockRecorder) StoreProbe(src, dest, probe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProbe", reflect.TypeOf((*MockNetworkTopology)(nil).StoreProbe), src, dest, probe)
}
