// Code generated by MockGen. DO NOT EDIT.
// Source: network_topology.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	networktopology "d7y.io/dragonfly/v2/scheduler/networktopology"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkTopology is a mock of NetworkTopology interface.
type MockNetworkTopology struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkTopologyMockRecorder
}

// MockNetworkTopologyMockRecorder is the mock recorder for MockNetworkTopology.
type MockNetworkTopologyMockRecorder struct {
	mock *MockNetworkTopology
}

// NewMockNetworkTopology creates a new mock instance.
func NewMockNetworkTopology(ctrl *gomock.Controller) *MockNetworkTopology {
	mock := &MockNetworkTopology{ctrl: ctrl}
	mock.recorder = &MockNetworkTopologyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkTopology) EXPECT() *MockNetworkTopologyMockRecorder {
	return m.recorder
}

// DeleteHost mocks base method.
func (m *MockNetworkTopology) DeleteHost(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockNetworkTopologyMockRecorder) DeleteHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockNetworkTopology)(nil).DeleteHost), arg0)
}

// LoadDestHostIDs mocks base method.
func (m *MockNetworkTopology) LoadDestHostIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDestHostIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDestHostIDs indicates an expected call of LoadDestHostIDs.
func (mr *MockNetworkTopologyMockRecorder) LoadDestHostIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDestHostIDs", reflect.TypeOf((*MockNetworkTopology)(nil).LoadDestHostIDs), arg0)
}

// LoadProbes mocks base method.
func (m *MockNetworkTopology) LoadProbes(arg0, arg1 string) networktopology.Probes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProbes", arg0, arg1)
	ret0, _ := ret[0].(networktopology.Probes)
	return ret0
}

// LoadProbes indicates an expected call of LoadProbes.
func (mr *MockNetworkTopologyMockRecorder) LoadProbes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProbes", reflect.TypeOf((*MockNetworkTopology)(nil).LoadProbes), arg0, arg1)
}

// ProbedCount mocks base method.
func (m *MockNetworkTopology) ProbedCount(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProbedCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProbedCount indicates an expected call of ProbedCount.
func (mr *MockNetworkTopologyMockRecorder) ProbedCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbedCount", reflect.TypeOf((*MockNetworkTopology)(nil).ProbedCount), arg0)
}

// StoreProbe mocks base method.
func (m *MockNetworkTopology) StoreProbe(srcHostID, destHostID string, probe *networktopology.Probe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProbe", srcHostID, destHostID, probe)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreProbe indicates an expected call of StoreProbe.
func (mr *MockNetworkTopologyMockRecorder) StoreProbe(srcHostID, destHostID, probe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProbe", reflect.TypeOf((*MockNetworkTopology)(nil).StoreProbe), srcHostID, destHostID, probe)
}
