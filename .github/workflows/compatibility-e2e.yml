name: Compatibility E2E Test

on:
  push:
    branches: [main, release-*]
  pull_request:
    branches: [main, release-*]

env:
  GO_VERSION: 1.15
  KIND_VERSION: v0.11.1
  CONTAINERD_VERSION: v1.5.2
  GOPROXY: https://goproxy.io,direct
  DRAGONFLY_E2E_TEST_MODE: compatibility
  DRAGONFLY_DFDAEMON_IMAGE_TAG: v0.4.0

jobs:
  skip_check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Skip Check
        id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg", "**.svg"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  e2e_tests:
    runs-on: ubuntu-latest
    needs: skip_check
    if: needs.skip_check.outputs.noop != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: |
          go mod vendor
          go get github.com/onsi/ginkgo/ginkgo
          mkdir -p /tmp/artifact

      - name: Setup Kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          config: ./test/testdata/kind/config.yaml

      - name: Build images
        run: |
          make docker-build-manager
          make docker-build-cdn
          make docker-build-scheduler
          docker pull dragonflyoss/dfdaemon:${{ env.DRAGONFLY_DFDAEMON_IMAGE_TAG }}

      - name: Prepare kind environment
        run: |
          make kind-load-manager
          make kind-load-cdn
          make kind-load-scheduler
          kind load docker-image dragonflyoss/dfdaemon:${{ env.DRAGONFLY_DFDAEMON_IMAGE_TAG }}

      - name: Install dragonfly
        run: |
          helm install --wait --timeout 10m --dependency-update --create-namespace --namespace dragonfly-system -f test/testdata/charts/compatibility-config.yaml dragonfly deploy/helm-charts/charts/dragonfly
          kubectl apply -f test/testdata/k8s/file-server.yaml
          kubectl get po --namespace dragonfly-e2e
          kubectl get po --namespace dragonfly-system
          kubectl wait po file-server-0 --namespace dragonfly-e2e --for=condition=ready --timeout=10m

      - name: Run compatibility E2E test
        run: make actions-e2e-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          flags: e2etests

      - name: Upload Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: dragonfly-logs
          path: /tmp/artifact/
