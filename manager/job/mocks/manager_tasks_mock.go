// Code generated by MockGen. DO NOT EDIT.
// Source: manager_tasks.go
//
// Generated by this command:
//
//	mockgen -destination mocks/manager_tasks_mock.go -source manager_tasks.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	job "d7y.io/dragonfly/v2/internal/job"
	models "d7y.io/dragonfly/v2/manager/models"
	types "d7y.io/dragonfly/v2/manager/types"
	gomock "go.uber.org/mock/gomock"
)

// MockManagerTasks is a mock of ManagerTasks interface.
type MockManagerTasks struct {
	ctrl     *gomock.Controller
	recorder *MockManagerTasksMockRecorder
}

// MockManagerTasksMockRecorder is the mock recorder for MockManagerTasks.
type MockManagerTasksMockRecorder struct {
	mock *MockManagerTasks
}

// NewMockManagerTasks creates a new mock instance.
func NewMockManagerTasks(ctrl *gomock.Controller) *MockManagerTasks {
	mock := &MockManagerTasks{ctrl: ctrl}
	mock.recorder = &MockManagerTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerTasks) EXPECT() *MockManagerTasksMockRecorder {
	return m.recorder
}

// CreateDeleteTask mocks base method.
func (m *MockManagerTasks) CreateDeleteTask(arg0 context.Context, arg1 []models.Scheduler, arg2 types.DeleteTasksArgs) (*job.GroupJobState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeleteTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*job.GroupJobState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeleteTask indicates an expected call of CreateDeleteTask.
func (mr *MockManagerTasksMockRecorder) CreateDeleteTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeleteTask", reflect.TypeOf((*MockManagerTasks)(nil).CreateDeleteTask), arg0, arg1, arg2)
}

// CreateListTasks mocks base method.
func (m *MockManagerTasks) CreateListTasks(arg0 context.Context, arg1 []models.Scheduler, arg2 types.ListTasksArgs) (*job.GroupJobState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].(*job.GroupJobState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListTasks indicates an expected call of CreateListTasks.
func (mr *MockManagerTasksMockRecorder) CreateListTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListTasks", reflect.TypeOf((*MockManagerTasks)(nil).CreateListTasks), arg0, arg1, arg2)
}
