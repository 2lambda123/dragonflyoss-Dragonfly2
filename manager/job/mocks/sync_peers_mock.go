// Code generated by MockGen. DO NOT EDIT.
// Source: sync_peers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSyncPeers is a mock of SyncPeers interface.
type MockSyncPeers struct {
	ctrl     *gomock.Controller
	recorder *MockSyncPeersMockRecorder
}

// MockSyncPeersMockRecorder is the mock recorder for MockSyncPeers.
type MockSyncPeersMockRecorder struct {
	mock *MockSyncPeers
}

// NewMockSyncPeers creates a new mock instance.
func NewMockSyncPeers(ctrl *gomock.Controller) *MockSyncPeers {
	mock := &MockSyncPeers{ctrl: ctrl}
	mock.recorder = &MockSyncPeersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncPeers) EXPECT() *MockSyncPeersMockRecorder {
	return m.recorder
}

// Serve mocks base method.
func (m *MockSyncPeers) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve.
func (mr *MockSyncPeersMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockSyncPeers)(nil).Serve))
}

// Stop mocks base method.
func (m *MockSyncPeers) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSyncPeersMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSyncPeers)(nil).Stop))
}
